---
import '@/css/authorcard.scss';

import { Picture } from 'astro-imagetools/components';

import BlogCard from '@/components/BlogCard.astro';
import ContentTopBar from '@/components/ContentTopBar.astro';
import { Footer } from '@/components/Footer';
import Hero from '@/components/Hero.astro';
import Paginator from '@/components/Paginator.astro';
import IconGithub from '@/icons/github';
import IconLink from '@/icons/link';
import IconLinkedin from '@/icons/linkedin';
import IconTwitter from '@/icons/twitter';
import Base from '@/layouts/Base.astro';
import type { PostFrontmatter } from '@/types/PostFrontmatter';
import type { PostPage } from '@/types/PostPage';
import getAuthorData from '@/utils/getAuthorData';

type GetStaticPaths = {
  paginate: any;
}; // Overrides `GetStaticPathsOptions` types from Astro

export async function getStaticPaths({ paginate }: GetStaticPaths) {
  const allPosts =  (await Astro.glob<PostFrontmatter>('../../../posts/*.md')).filter(
    (post) => !post.frontmatter.draft
  );
  let allAuthors = allPosts
    .map((post) => post.frontmatter?.author)
    .flat()
    .filter((author) => author !== undefined);

  allAuthors = [...new Set(allAuthors)];

  return allAuthors.map((author) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter?.author
        ?.trim()
        .toLowerCase()
        .includes(author?.trim().toLowerCase() as string)
    );

    return paginate(filteredPosts, {
      params: { author },
      pageSize: 6,
    });
  });
}

interface Props {
  page: PostPage;
}

const { page } = Astro.props as Props;
const { author } = Astro.params;
const authorData = getAuthorData(author as string);
const title = authorData?.name ?? '';
const description = authorData?.summary ?? '';
---

<Base head={{ title, description }}>
  <div class="flex w-full flex-wrap">
    <div class="md:2/5 w-full lg:w-2/5">
      <Hero mode="page">
        <div slot="title">
          <h1
            class="md:text-7x text-right text-5xl font-bold capitalize text-primarydark dark:text-textdark"
          >
            <div class="flex w-full flex-wrap items-center justify-end">
              <div class="">
                <div class="text-2xl">Author</div>
                <div class="w-full">{author}</div>
                <div class="text-lg">{authorData?.title}</div>
                <div
                  class="flex flex-wrap items-center justify-end text-accent"
                >
                  {
                    authorData?.links?.github && (
                      <div class="flex">
                        <a href={authorData.links?.github} class="icon-sm mr-1">
                          <IconGithub />
                        </a>
                      </div>
                    )
                  }

                  {
                    authorData?.links?.linkedin && (
                      <div class="flex">
                        <a
                          href={authorData.links?.linkedin}
                          class="icon-sm mr-1"
                        >
                          <IconLinkedin />
                        </a>
                      </div>
                    )
                  }

                  {
                    authorData?.links?.twitter && (
                      <div class="flex">
                        <a
                          href={authorData.links?.twitter}
                          class="icon-sm mr-1"
                        >
                          <IconTwitter />
                        </a>
                      </div>
                    )
                  }

                  {
                    authorData?.links?.website && (
                      <div class="flex">
                        <a
                          href={authorData.links?.website}
                          class="icon-sm mr-1"
                        >
                          <IconLink />
                        </a>
                      </div>
                    )
                  }
                </div>
              </div>

              <div class="">
                <div
                  class="author-avatar m-2 h-full w-full overflow-hidden rounded-full border-boom"
                >
                  <Picture src={authorData?.avatar} alt="" />
                </div>
              </div>
            </div>
          </h1>
        </div>
      </Hero>
    </div>
    <div class="md:2/5 h-screen w-full p-8 lg:w-3/5 lg:overflow-y-auto">
      <ContentTopBar>
        <div slot="left">{page.total} Results</div>
      </ContentTopBar>
      <div class="my-10 flex w-full justify-center">
        <div class="flex max-w-7xl flex-wrap justify-center">
          {page.data.map((post) => <BlogCard post={post} />)}
        </div>
      </div>
      <div>
        <Paginator page={page} />
      </div>

      <Footer />
    </div>
  </div>
</Base>
