---
import 'src/css/blogpost.scss';
// import '@fontsource/flamenco';
// import "@fontsource/exo"
// import "@fontsource/poppins"

// import '@fontsource/pirata-one';
import type {
  IFrontmatter,
  MarkdownInstance,
} from 'astro-boilerplate-components';
// import { BlogCard } from 'astro-boilerplate-components';
// import { PostContent, PostHeader, Section } from 'astro-boilerplate-components';
import type { ReactNode } from 'react';

import IconClock from '@/icons/clock';

import MiniBlogCard from './MiniBlogCard.astro';
import BlogCard from './BlogCard.astro';
// import ThemeToggle from './ThemeToggleButton';
import ContentTopBar from './ContentTopBar.astro';

// import { AppConfig } from '@/utils/AppConfig';
interface IBlogFrontmatter extends IFrontmatter {
astro: any;
  tags: string[];
}

type IBlogPostProps = {
  frontmatter: IBlogFrontmatter;
  children: ReactNode;
  posts: MarkdownInstance<IFrontmatter>[];
};

// interface Props {
//   content: IBlogFrontmatter;
// }

const allPosts = await Astro.glob<IBlogFrontmatter>('../pages/posts/*.md');

const props = Astro.props as IBlogPostProps;
// console.log(props.frontmatter.pubDate);

const formatDate = (date: string) => {
  const d = new Date(date);
  return `${d.toLocaleDateString('en-US', {
    // weekday: 'short',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  })}`;
};

const getReadingTime = (content: string) => {
  if (!content) return 0;
  const wordsPerMinute = 200;
  const noOfWords = content.split(/\s/g).length;
  return Math.ceil(noOfWords / wordsPerMinute);
};

const getUpNext = (count: number) => {
  const filteredPosts = allPosts.filter(
    (post) => post.frontmatter.title !== props.frontmatter.title
  );

  const taggedPosts = filteredPosts.filter((post) => {
    return post.frontmatter.tags.some((tag: any) =>
      props.frontmatter.tags.includes(tag)
    );
  });

  if (!taggedPosts.length) {
    // const idx1 = Math.floor(Math.random() * filteredPosts.length);
    // const idx2 = Math.floor(Math.random() * filteredPosts.length);
    const idxs = [];
     for(let i = 0; i <= count; i++) {
      idxs.push(Math.floor(Math.random() * filteredPosts.length));
    }
    return [...new Set(idxs.map((idx) => filteredPosts[idx]))];
  };

  // const idx1 = Math.floor(Math.random() * taggedPosts.length);
  // const idx2 = Math.floor(Math.random() * taggedPosts.length);
  // return [...new Set([taggedPosts[idx1], taggedPosts[idx2]])];

  const idxs = [];
  for(let i = 0; i <= count; i++) {
    idxs.push(Math.floor(Math.random() * taggedPosts.length));
  }
  return [...new Set(idxs.map((idx) => taggedPosts[idx]))];
};

const allTags = allPosts.reduce((acc: any, post) => {
  post.frontmatter.tags.forEach((tag: any) => {
    if (!acc.includes(tag)) {
      acc.push(tag);
    }
  });
  return acc;
}, []);


---

<div class="p-8 ">
  <ContentTopBar>
    <div slot="left">
      <span class="text-sm md:text-base lg:text-lg">{formatDate(props.frontmatter.pubDate)}</span>
    </div>
    <div slot="middle">
      <div class="flex items-center text-sm md:text-base lg:text-lg">
        <IconClock className="icon-xs mr-2" />
        {getReadingTime(props.frontmatter.astro.source)} minute read
      </div>
    </div>
    <!-- <div slot="right">
      <ThemeToggle client:only />
    </div> -->
    </ContentTopBar>
  <!-- <small class="my-5 flex w-full justify-between px-4 text-lg">
    <div class="opacity-70">
      {formatDate(props.frontmatter.pubDate)}
    </div>
    <div class="flex items-center">
      <IconClock className="icon-xs mr-2" />
      {getReadingTime(props.frontmatter.astro.source)} minute read
    </div>
    <div class=""><ThemeToggle client:only /></div>
  </small> -->
  <div class="blogpost flex justify-center  md:justify-between  ">
    <div class=" w-full max-w-7xl p-4 lg:max-w-2xl lg:self-start relative">
      <Fragment set:html={props.frontmatter.astro.html} />
      <div class="2xl:hidden">
        <div class=" text-bokor w-full px-2 pt-4 text-4xl font-bold">Read Next</div>
        <div class="w-full flex flex-wrap mt-8 ">
          {getUpNext(4).map(post=>(
            <BlogCard post={post} />
          ))}
        </div>
      </div>
      <div class="w-full p-4 mt-8 flex justify-center text-sm opacity-50">
        Copywrite Â© {new Date().getFullYear()} - All Rights Reserved
      </div>
    </div>
    <div class="p-4 hidden 2xl:block">
      <div class="flex flex-wrap justify-start sticky top-0 right-column">
        <div class=" w-full px-2 pt-4 text-exo text-2xl font-bold text-right">Read Next</div>
        {getUpNext(1).map(post=>(
          <MiniBlogCard post={post} />
        ))}
        <!-- <div class="w-full px-2 pt-4 text-bokor text-4xl font-bold">Tags</div> -->
        <div class="py-4  flex flex-wrap justify-end items-center ">
          {allTags.map((tag: string) => (
            <a
              href={`/tag/${tag}/1`}
              class={`capitalize px-2 py-1 rounded-lg text-primarydark dark:text-textdark   text-sm mr-2 mb-2 blogpost-tags opacity-80 ${props.frontmatter.tags.includes(
                tag
              ) && 'font-bold text-lg'}`}
            >
              #{tag}
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

