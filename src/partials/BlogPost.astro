---
import 'src/css/blogpost.scss';
import '@fontsource/flamenco';

// import '@fontsource/pirata-one';
import type {
  IFrontmatter,
  MarkdownInstance,
} from 'astro-boilerplate-components';
// import { BlogCard } from 'astro-boilerplate-components';
// import { PostContent, PostHeader, Section } from 'astro-boilerplate-components';
import type { ReactNode } from 'react';

import IconClock from '@/icons/clock';

import BlogCard from './BlogCard.astro';

// import { AppConfig } from '@/utils/AppConfig';
interface IBlogFrontmatter extends IFrontmatter {
  tags: string[];
}

type IBlogPostProps = {
  frontmatter: IBlogFrontmatter;
  children: ReactNode;
  posts: MarkdownInstance<IFrontmatter>[];
};

// interface Props {
//   content: IBlogFrontmatter;
// }

const allPosts = await Astro.glob<IBlogFrontmatter>('../pages/posts/*.md');

const props = Astro.props as IBlogPostProps;
// console.log(props.frontmatter.pubDate);

const formatDate = (date: string) => {
  const d = new Date(date);
  return `${d.toLocaleDateString('en-US', {
    // weekday: 'short',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  })}`;
};

const getReadingTime = (content: string) => {
  if (!content) return 0;
  const wordsPerMinute = 200;
  const noOfWords = content.split(/\s/g).length;
  return Math.ceil(noOfWords / wordsPerMinute);
};

const getUpNext = () => {
  const filteredPosts = allPosts.filter(
    (post) => post.frontmatter.title !== props.frontmatter.title
  );

  const taggedPosts = filteredPosts.filter((post) => {
    return post.frontmatter.tags.some((tag: any) =>
      props.frontmatter.tags.includes(tag)
    );
  });

  return taggedPosts[Math.floor(Math.random() * (taggedPosts.length))];
};

const allTags = allPosts.reduce((acc: any, post) => {
  post.frontmatter.tags.forEach((tag: any) => {
    if (!acc.includes(tag)) {
      acc.push(tag);
    }
  });
  return acc;
}, []);

---

<div class="p-8">
  <small class="my-5 flex w-full justify-between px-4 text-sm">
    <div class="opacity-70">
      {formatDate(props.frontmatter.pubDate)}
    </div>
    <div class="flex items-center">
      <IconClock className="icon-xs mr-2" />
      {getReadingTime(props.frontmatter.astro.source)} minute read
    </div>
    <div class="">test</div>
  </small>
  <div class="blogpost flex justify-center  md:justify-start">
    <div class=" w-full max-w-7xl p-4 lg:max-w-2xl lg:self-start relative">
      <Fragment set:html={props.frontmatter.astro.html} />
      <!-- <button class="bg-secondarydark p-2 rounded-full absolute scroll-to-top-btn">test</button> -->
    </div>
    <div class="p-4 ">
      <div class="flex flex-wrap justify-center sticky top-0">
        <div class="font-bold w-full px-8 pt-4">Up Next</div>
        <BlogCard post={getUpNext()} />
        <div class="font-bold w-full px-8 pt-4">Tags</div>
        <div class="p-4 px-8 flex flex-wrap justify-center items-center ">
          {allTags.map((tag: string) => (
            <a
              href={`/tag/${tag}/1`}
              class={`capitalize px-2 py-1 rounded-lg  text-sm mr-2 mb-2 blogpost-tags opacity-50 ${props.frontmatter.tags.includes(
                tag
              ) && 'font-bold text-lg'}`}
            >
              {tag}
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

