---
import 'src/css/blogpost.scss';

// import '@fontsource/flamenco';
// import "@fontsource/exo"
// import "@fontsource/poppins"
// import '@fontsource/pirata-one';
import type {
  IFrontmatter,
  MarkdownInstance,
} from 'astro-boilerplate-components';
// import { BlogCard } from 'astro-boilerplate-components';
// import { PostContent, PostHeader, Section } from 'astro-boilerplate-components';
import type { ReactNode } from 'react';

import IconClock from '@/icons/clock';
import IconEmail from '@/icons/email';
import IconEvernote from '@/icons/evernote';
import IconFacebook from '@/icons/facebook';
import IconLinkedin from '@/icons/linkedin';
import IconTwitter from '@/icons/twitter';

import BlogCard from './BlogCard.astro';
// import ThemeToggle from './ThemeToggleButton';
import ContentTopBar from './ContentTopBar.astro';
import MiniBlogCard from './MiniBlogCard.astro';

// import { AppConfig } from '@/utils/AppConfig';
interface IBlogFrontmatter extends IFrontmatter {
  astro: any;
  tags: string[];
}

type IBlogPostProps = {
  frontmatter: IBlogFrontmatter;
  children: ReactNode;
  posts: MarkdownInstance<IFrontmatter>[];
  html: () => string;
  raw: () => string;
};

// interface Props {
//   content: IBlogFrontmatter;
// }

const allPosts = await Astro.glob<IBlogFrontmatter>('../pages/posts/*.md');

const props = Astro.props as IBlogPostProps;
// console.log(props.frontmatter.pubDate);

const formatDate = (date: string) => {
  const d = new Date(date);
  return `${d.toLocaleDateString('en-US', {
    // weekday: 'short',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  })}`;
};

const getReadingTime = (content: string) => {
  if (!content) return 0;
  const wordsPerMinute = 200;
  const noOfWords = content.split(/\s/g).length;
  return Math.ceil(noOfWords / wordsPerMinute);
};

const getUpNext = (count: number) => {
  const filteredPosts = allPosts.filter(
    (post) => post.frontmatter.title !== props.frontmatter.title
  );

  const taggedPosts = filteredPosts.filter((post) => {
    return post.frontmatter.tags.some((tag: any) =>
      props.frontmatter.tags.includes(tag)
    );
  });

  if (!taggedPosts.length) {
    // const idx1 = Math.floor(Math.random() * filteredPosts.length);
    // const idx2 = Math.floor(Math.random() * filteredPosts.length);
    const idxs = [];
    for (let i = 0; i <= count; i++) {
      idxs.push(Math.floor(Math.random() * filteredPosts.length));
    }
    return [...new Set(idxs.map((idx) => filteredPosts[idx]))];
  }

  // const idx1 = Math.floor(Math.random() * taggedPosts.length);
  // const idx2 = Math.floor(Math.random() * taggedPosts.length);
  // return [...new Set([taggedPosts[idx1], taggedPosts[idx2]])];

  const idxs = [];
  for (let i = 0; i <= count; i++) {
    idxs.push(Math.floor(Math.random() * taggedPosts.length));
  }
  return [...new Set(idxs.map((idx) => taggedPosts[idx]))];
};

const allTags = allPosts.reduce((acc: any, post) => {
  post.frontmatter.tags.forEach((tag: any) => {
    if (!acc.includes(tag)) {
      acc.push(tag);
    }
  });
  return acc;
}, []);

const mdHtml = props.html ? props.html() : '';
const rawText = props.raw ? props.raw() : '';
---

<script>
  const shareFacebook = () => {
    window.open(
      `http://facebook.com/sharer/sharer.php?u=${encodeURIComponent(
        window.location.href
      )}`,
      '_blank',
      'left=0,top=0,width=650,height=420,personalbar=0,toolbar=0,scrollbars=0,resizable=0'
    );
  };

  const shareTwitter = () => {
    window.open(
      'http://twitter.com/share?url=' + encodeURIComponent(window.location.href)
      // '',
      // 'left=0,top=0,width=550,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0'
    );
  };

  const shareLinkedin = () => {
    window.open(
      'http://www.linkedin.com/shareArticle?mini=true&url=' +
        encodeURIComponent(window.location.href)
      // '_blank',
      // 'left=0,top=0,width=650,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0'
    );
  };

  const shareEvernote = () => {
    window.open(
      'https://www.evernote.com/clip.action?url=' +
        encodeURIComponent(window.location.href)
      // '_blank',
      // 'left=0,top=0,width=650,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0'
    );
  };

  const shareEmail = () => {
    window.open(
      'mailto:?subject=' +
        encodeURIComponent(document.title) +
        '&body=' +
        encodeURIComponent(window.location.href)
      // '',
      // 'left=0,top=0,width=650,height=450,personalbar=0,toolbar=0,scrollbars=0,resizable=0'
    );
  };

  (() => {
    const facebookBtn = document.getElementById('facebook-btn');
    facebookBtn?.addEventListener('click', shareFacebook);

    const twitterBtn = document.getElementById('twitter-btn');
    twitterBtn?.addEventListener('click', shareTwitter);

    const linkedinBtn = document.getElementById('linkedin-btn');
    linkedinBtn?.addEventListener('click', shareLinkedin);

    const evernoteBtn = document.getElementById('evernote-btn');
    evernoteBtn?.addEventListener('click', shareEvernote);

    const emailBtn = document.getElementById('email-btn');
    emailBtn?.addEventListener('click', shareEmail);

    const headingsInPost = document.querySelectorAll(
      '.post-content h1, .post-content h2, .post-content h3, .post-content h4, .post-content h5, .post-content h6'
    );

    // create a gopher link for each heading
    headingsInPost.forEach((heading) => {
      heading.classList.add(
        ...['cursor-pointer', 'flex', 'items-center', 'post-heading']
      );
      const linkEl = document.createElement('div');
      linkEl.classList.add(...['gopher-link', 'opacity-0', 'hover:opacity-50']);
      linkEl.innerHTML = `<svg style="width: 100%; height: 100%;" viewBox="0 0 24 24">
      <path
        fill="currentColor"
        d="M10.59,13.41C11,13.8 11,14.44 10.59,14.83C10.2,15.22 9.56,15.22 9.17,14.83C7.22,12.88 7.22,9.71 9.17,7.76V7.76L12.71,4.22C14.66,2.27 17.83,2.27 19.78,4.22C21.73,6.17 21.73,9.34 19.78,11.29L18.29,12.78C18.3,11.96 18.17,11.14 17.89,10.36L18.36,9.88C19.54,8.71 19.54,6.81 18.36,5.64C17.19,4.46 15.29,4.46 14.12,5.64L10.59,9.17C9.41,10.34 9.41,12.24 10.59,13.41M13.41,9.17C13.8,8.78 14.44,8.78 14.83,9.17C16.78,11.12 16.78,14.29 14.83,16.24V16.24L11.29,19.78C9.34,21.73 6.17,21.73 4.22,19.78C2.27,17.83 2.27,14.66 4.22,12.71L5.71,11.22C5.7,12.04 5.83,12.86 6.11,13.65L5.64,14.12C4.46,15.29 4.46,17.19 5.64,18.36C6.81,19.54 8.71,19.54 9.88,18.36L13.41,14.83C14.59,13.66 14.59,11.76 13.41,10.59C13,10.2 13,9.56 13.41,9.17Z"
      />
    </svg>`;
      const copiedEl = document.createElement('div');
      copiedEl.classList.add(...['opacity-0']);
      copiedEl.innerHTML = `<div class="text-xs">Copied!</div>`;
      heading.appendChild(linkEl);
      heading.appendChild(copiedEl);
      heading.addEventListener('click', async () => {
        const url = window.location.href.split('#')[0];
        await navigator.clipboard.writeText(
          `${url}#${encodeURIComponent(heading.id)}`
        );

        copiedEl.classList.remove('opacity-0');
        setTimeout(() => {
          copiedEl.classList.add('opacity-0');
        }, 1000);
      });
    });
  })();
</script>

<div class="p-8">
  <ContentTopBar>
    <div slot="left">
      <span class="text-sm md:text-base lg:text-lg"
        >{formatDate(props.frontmatter.pubDate)}
      </span>
    </div>
    <div slot="middle">
      <div class="flex items-center text-sm md:text-base lg:text-lg">
        <IconClock className="icon-xs mr-2" />
        {getReadingTime(rawText)} minute read
      </div>
    </div>
    <!-- <div slot="right">
      <ThemeToggle client:only />
    </div> -->
  </ContentTopBar>
  <!-- <small class="my-5 flex w-full justify-between px-4 text-lg">
    <div class="opacity-70">
      {formatDate(props.frontmatter.pubDate)}
    </div>
    <div class="flex items-center">
      <IconClock className="icon-xs mr-2" />
      {getReadingTime(props.frontmatter.astro.source)} minute read
    </div>
    <div class=""><ThemeToggle client:only /></div>
  </small> -->
  <div class="blogpost flex justify-center md:justify-between">
    <div class="relative w-full max-w-7xl p-4 lg:max-w-2xl lg:self-start">
      <!-- <span class="">{mdText[0]}</span> -->
      <div class="post-content">
        <Fragment set:html={mdHtml} />
      </div>
      <div>
        <!-- <h2 class="w-full text-center">Subscribe & Share</h2> -->
        <div class="mt-10 flex w-full items-center justify-center">
          <!-- <div class="right-toolbar"> -->
          <div
            id="facebook-btn"
            class="social-button fb-color mx-3 flex cursor-pointer items-center justify-center rounded-md p-1 drop-shadow-md"
          >
            <IconFacebook className="social-button " />
          </div>

          <div
            id="twitter-btn"
            class="social-button twitter-color mx-3 flex cursor-pointer items-center justify-center rounded-md p-1 drop-shadow-md"
          >
            <IconTwitter className="social-button" />
          </div>

          <div
            id="linkedin-btn"
            class="social-button linkedin-color mx-3 flex cursor-pointer items-center justify-center rounded-md p-1 drop-shadow-md"
          >
            <IconLinkedin className="social-button" />
          </div>

          <div
            id="evernote-btn"
            class="social-button evernote-color mx-3 flex cursor-pointer items-center justify-center rounded-md p-1 drop-shadow-md"
          >
            <IconEvernote className="social-button" />
          </div>

          <div
            id="email-btn"
            class="social-button mx-3 flex cursor-pointer items-center justify-center rounded-md bg-accent p-1 drop-shadow-md"
          >
            <IconEmail className="social-button" />
          </div>
        </div>
        <!-- </div> -->
      </div>
      <div class="2xl:hidden">
        <div class="text-bokor w-full px-2 pt-4 text-4xl font-bold">
          Read Next
        </div>
        <div class="mt-8 flex w-full flex-wrap">
          {getUpNext(4).map((post) => <BlogCard post={post} />)}
        </div>
      </div>
      <div class="mt-8 flex w-full justify-center p-4 text-sm opacity-50">
        Copywrite © {new Date().getFullYear()} - All Rights Reserved
      </div>
    </div>
    <div class="hidden p-4 2xl:block">
      <div class="right-column sticky top-0 flex flex-wrap justify-start">
        <div class="text-exo w-full px-2 pt-4 text-right text-2xl font-bold">
          Read Next
        </div>
        {getUpNext(1).map((post) => <MiniBlogCard post={post} />)}
        <!-- <div class="w-full px-2 pt-4 text-bokor text-4xl font-bold">Tags</div> -->
        <div class="flex flex-wrap items-center justify-end py-4">
          {
            allTags.map((tag: string) => (
              <a
                href={`/tag/${tag}/1`}
                class={`blogpost-tags mr-2 mb-2 rounded-lg px-2 py-1   text-sm capitalize text-primarydark opacity-80 dark:text-textdark ${
                  props.frontmatter.tags.includes(tag) && 'text-lg font-bold'
                }`}
              >
                #{tag}
              </a>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</div>
